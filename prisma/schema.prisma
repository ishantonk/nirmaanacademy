// Prisma schema file for Nirmaan Academy
// Learn more at: https://pris.ly/d/prisma-schema

// Generate Prisma Client for accessing the database
generator client {
  provider = "prisma-client-js"
}

// Define your datasource (using PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS ///////////////////////////////////////////////////////////////////////

// User roles in the system
enum UserRole {
  STUDENT
  ADMIN
}

// Course status (e.g., Draft before publishing)
enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Order statuses for payments
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

// Post statuses (e.g., blog posts)
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// MODELS //////////////////////////////////////////////////////////////////////

// The User model represents users of the platform.
model User {
  id            String    @id @default(cuid())
  name          String? // Optional name
  email         String?   @unique
  emailVerified DateTime?
  password      String? // Hashed password
  image         String? // Profile image URL
  role          UserRole  @default(STUDENT) // Role: STUDENT or ADMIN
  bio           String?   @db.Text // User bio in text format

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations to other models
  accounts    Account[]
  sessions    Session[]
  enrollments Enrollment[] // Courses the user is enrolled in
  reviews     Review[] // Reviews written by the user
  orders      Order[] // Orders made by the user
  cartItems   CartItem[] // Items in the user's cart
  posts       Post[] // Blog posts authored by the user
}

// External Account linking (e.g., OAuth providers)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model for managing authenticated sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// For email verification tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Categories classify courses and blog posts.
model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String? @db.Text
  slug        String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships: courses and posts associated with this category.
  courses Course[]
  posts   Post[]
}

// Faculty represents instructors who teach courses.
model Faculty {
  id          String  @id @default(cuid())
  name        String
  email       String  @unique
  phone       String?
  bio         String? @db.Text
  image       String? // Faculty photo URL
  designation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A faculty can teach multiple courses.
  courses Course[] @relation("CourseFaculties")
}

// Mode model: represents modes for a course (e.g., in-person, online) with associated pricing.
model Mode {
  id   String @id @default(cuid())
  name String
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships:
  availableInCourses  Course[]    @relation("AvailableModes")
  selectedInOrderItem OrderItem[] @relation("OrderMode")
  selectedInCartItem  CartItem[]  @relation("CartMode")
}

// Attempt model: represents available attempts (or sessions) for a course.
model Attempt {
  id   String @id @default(cuid())
  name String
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  availableInCourses  Course[]    @relation("AvailableAttempts")
  selectedInOrderItem OrderItem[] @relation("OrderAttempt")
  selectedInCartItem  CartItem[]  @relation("CartAttempt")
}

// The main Course model.
model Course {
  id                     String       @id @default(cuid())
  title                  String
  slug                   String       @unique
  description            String?      @db.Text
  thumbnail              String? // URL to thumbnail image
  price                  Decimal      @default(0) @db.Decimal(10, 2)
  discountPrice          Decimal?     @db.Decimal(10, 2)
  onSale                 Boolean      @default(false)
  durationInMin          Int          @default(0) // Duration in minutes
  status                 CourseStatus @default(DRAFT)
  featured               Boolean      @default(false)
  videoLanguage          String?
  courseMaterialLanguage String?
  demoVideoUrl           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships:
  categoryId        String
  category          Category     @relation(fields: [categoryId], references: [id])
  availableModes    Mode[]       @relation("AvailableModes")
  availableAttempts Attempt[]    @relation("AvailableAttempts")
  faculties         Faculty[]    @relation("CourseFaculties")
  enrollments       Enrollment[]
  reviews           Review[]
  cartItems         CartItem[]
  orderItems        OrderItem[]

  @@index([categoryId])
}

// Enrollment model tracks which user has enrolled in which course.
model Enrollment {
  id          String    @id @default(cuid())
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships:
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// Review model stores course reviews written by users.
model Review {
  id      String  @id @default(cuid())
  rating  Int
  comment String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships:
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// A record for items in a user's cart.
model CartItem {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships:
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  modeId    String?
  Mode      Mode?    @relation("CartMode", fields: [modeId], references: [id])
  attemptId String?
  Attempt   Attempt? @relation("CartAttempt", fields: [attemptId], references: [id])

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// Order model stores orders placed by users.
model Order {
  id              String      @id @default(cuid())
  amount          Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  paymentId       String?
  razorpayOrderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships:
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([userId])
}

// Individual items for an order.
model OrderItem {
  id    String  @id @default(cuid())
  price Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships:
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  modeId    String?
  mode      Mode?    @relation("OrderMode", fields: [modeId], references: [id])
  attemptId String?
  attempt   Attempt? @relation("OrderAttempt", fields: [attemptId], references: [id])

  @@index([orderId])
  @@index([courseId])
}

// Blog Post model.
model Post {
  id               String     @id @default(cuid())
  title            String
  slug             String     @unique
  excerpt          String?    @db.Text
  content          String     @db.Text
  featuredImage    String?
  featuredImageAlt String?
  status           PostStatus @default(DRAFT)
  publishedAt      DateTime?
  readTimeMinutes  Int?
  metaTitle        String?
  metaDescription  String?    @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships:
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  tags       Tag[]

  @@index([authorId])
  @@index([categoryId])
  @@index([status])
  @@index([publishedAt])
}

// Tag model for blog posts.
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship: posts associated with this tag.
  posts Post[]

  @@index([slug])
}

model Visitor {
  id   String @id @default(cuid())
  user String
}

model Notice {
  id      String  @id @default(cuid())
  content String  @db.VarChar(300)
  visible Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GallerySlideType {
  IMAGE
  VIDEO
}

model GallerySlide {
  id        String           @id @default(cuid())
  title     String?          @db.VarChar(100)
  subtitle  String?          @db.VarChar(200)
  type      GallerySlideType @default(IMAGE)
  imageUrl  String?
  videoUrl  String?
  sortOrder Int              @default(0)
  visible   Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([sortOrder])
  @@index([visible])
}
