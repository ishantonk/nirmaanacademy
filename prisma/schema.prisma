// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(STUDENT)
  bio           String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  // Relationships
  enrollments Enrollment[]
  reviews     Review[]
  orders      Order[]
  cartItems   CartItem[]
  posts       Post[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String? @db.Text
  slug        String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courses Course[]
  posts   Post[]
}

model Faculty {
  id          String  @id @default(cuid())
  name        String
  email       String  @unique
  phone       String?
  bio         String? @db.Text
  image       String?
  designation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courses Course[] @relation("CourseFaculties")
}

model Mode {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  price         Decimal  @default(0) @db.Decimal(10, 2)
  discountPrice Decimal? @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  availableInCourses Course[] @relation("AvailableModes")
  selectedByCourses  Course[] @relation("SelectedMode")
}

model Attempt {
  id   String @id @default(cuid())
  name String
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  availableInCourses Course[] @relation("AvailableAttempts")
  selectedByCourses  Course[] @relation("SelectedAttempt")
}

model Course {
  id                     String       @id @default(cuid())
  title                  String
  slug                   String       @unique
  description            String?      @db.Text
  thumbnail              String?
  price                  Decimal      @default(0) @db.Decimal(10, 2)
  discountPrice          Decimal?     @db.Decimal(10, 2)
  onSale                 Boolean      @default(false)
  durationInMin          Int          @default(0)
  status                 CourseStatus @default(DRAFT)
  featured               Boolean      @default(false)
  videoLanguage          String?
  courseMaterialLanguage String?
  demoVideoUrl           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  categoryId        String
  category          Category     @relation(fields: [categoryId], references: [id])
  selectedModeId    String
  selectedMode      Mode         @relation("SelectedMode", fields: [selectedModeId], references: [id])
  selectedAttemptId String
  selectedAttempt   Attempt      @relation("SelectedAttempt", fields: [selectedAttemptId], references: [id])
  availableModes    Mode[]       @relation("AvailableModes")
  availableAttempts Attempt[]    @relation("AvailableAttempts")
  faculties         Faculty[]    @relation("CourseFaculties")
  enrollments       Enrollment[]
  reviews           Review[]
  cartItems         CartItem[]
  orderItems        OrderItem[]

  @@index([categoryId])
}

model Enrollment {
  id          String    @id @default(cuid())
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Review {
  id      String  @id @default(cuid())
  rating  Int
  comment String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CartItem {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Order {
  id              String      @id @default(cuid())
  amount          Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  paymentId       String?
  razorpayOrderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([userId])
}

model OrderItem {
  id    String  @id @default(cuid())
  price Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  @@index([orderId])
  @@index([courseId])
}

model Post {
  id               String     @id @default(cuid())
  title            String
  slug             String     @unique
  excerpt          String?    @db.Text
  content          String     @db.Text
  featuredImage    String?
  featuredImageAlt String?
  status           PostStatus @default(DRAFT)
  publishedAt      DateTime?
  readTimeMinutes  Int?
  metaTitle        String?
  metaDescription  String?    @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  tags       Tag[]

  @@index([authorId])
  @@index([categoryId])
  @@index([status])
  @@index([publishedAt])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  posts Post[]

  @@index([slug])
}
