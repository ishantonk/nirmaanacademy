generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole     @default(STUDENT)
  bio           String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  cartItems     CartItem[]
  enrollments   Enrollment[]
  orders        Order[]
  posts         Post[]
  reviews       Review[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  subCategories Category[] @relation("CategorySubcategories")
  parentCategory Category? @relation("CategorySubcategories", fields: [parentCategoryId], references: [id])
  parentCategoryId String?
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]
  posts       Post[]
}

model Faculty {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  bio         String?
  image       String?
  designation String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[] @relation("CourseFaculties")
}

model Mode {
  id                  String      @id @default(cuid())
  name                String
  slug                String      @unique
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  selectedInCartItem  CartItem[]  @relation("CartMode")
  selectedInOrderItem OrderItem[] @relation("OrderMode")
  availableInCourses  Course[]    @relation("AvailableModes")
}

model Attempt {
  id                  String      @id @default(cuid())
  name                String
  slug                String      @unique
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  selectedInCartItem  CartItem[]  @relation("CartAttempt")
  selectedInOrderItem OrderItem[] @relation("OrderAttempt")
  availableInCourses  Course[]    @relation("AvailableAttempts")
}

model Course {
  id                     String       @id @default(cuid())
  title                  String
  slug                   String       @unique
  description            String?
  thumbnail              String?
  price                  Decimal      @default(0) @db.Decimal(10, 2)
  discountPrice          Decimal?     @db.Decimal(10, 2)
  onSale                 Boolean      @default(false)
  durationInMin          Int          @default(0)
  status                 CourseStatus @default(DRAFT)
  featured               Boolean      @default(false)
  videoLanguage          String?
  courseMaterialLanguage String?
  demoVideoUrl           String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  categoryId             String
  cartItems              CartItem[]
  category               Category     @relation(fields: [categoryId], references: [id])
  enrollments            Enrollment[]
  orderItems             OrderItem[]
  reviews                Review[]
  availableAttempts      Attempt[]    @relation("AvailableAttempts")
  availableModes         Mode[]       @relation("AvailableModes")
  faculties              Faculty[]    @relation("CourseFaculties")

  @@index([categoryId])
}

model Enrollment {
  id          String    @id @default(cuid())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CartItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  courseId  String
  attemptId String?
  modeId    String?
  Attempt   Attempt? @relation("CartAttempt", fields: [attemptId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Mode      Mode?    @relation("CartMode", fields: [modeId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Order {
  id              String      @id @default(cuid())
  amount          Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  paymentId       String?
  razorpayOrderId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  courseId  String
  attemptId String?
  modeId    String?
  attempt   Attempt? @relation("OrderAttempt", fields: [attemptId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  mode      Mode?    @relation("OrderMode", fields: [modeId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([courseId])
}

model Post {
  id               String     @id @default(cuid())
  title            String
  slug             String     @unique
  excerpt          String?
  content          String
  featuredImage    String?
  featuredImageAlt String?
  status           PostStatus @default(DRAFT)
  publishedAt      DateTime?
  readTimeMinutes  Int?
  metaTitle        String?
  metaDescription  String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  authorId         String
  categoryId       String
  author           User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category         Category   @relation(fields: [categoryId], references: [id])
  tags             Tag[]      @relation("PostToTag")

  @@index([authorId])
  @@index([categoryId])
  @@index([status])
  @@index([publishedAt])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToTag")

  @@index([slug])
}

model Visitor {
  id   String @id @default(cuid())
  user String
  ip   String @db.VarChar(100) // IPv4 or IPv6

  visitAt DateTime @default(now())
}

model Notice {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(300)
  visible   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GallerySlide {
  id        String           @id @default(cuid())
  title     String?          @db.VarChar(100)
  subtitle  String?          @db.VarChar(200)
  type      GallerySlideType @default(IMAGE)
  imageUrl  String?
  videoUrl  String?
  sortOrder Int              @default(0)
  visible   Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([sortOrder])
  @@index([visible])
}

enum UserRole {
  STUDENT
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum GallerySlideType {
  IMAGE
  VIDEO
}
